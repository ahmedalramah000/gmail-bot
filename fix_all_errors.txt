# إصلاحات شاملة لبوت Gmail-Telegram

هذا الملف يحتوي على تعليمات لإصلاح جميع المشكلات المعروفة في بوت Gmail-Telegram الذي يستخرج أكواد تحقق OpenAI من Gmail ويرسلها للمستخدمين عبر Telegram.

## المشكلات المعروفة:

1. **معالجة الأزرار المكررة**: البوت يعالج نفس النقرة على الزر عدة مرات
2. **أخطاء تعديل الرسائل**: البوت يفشل عند محاولة تعديل رسائل محذوفة أو غير قابلة للتعديل
3. **معالجة البريد المكرر**: البوت يعالج نفس رسالة البريد الإلكتروني أكثر من مرة
4. **غياب معالجة الأخطاء الشاملة**: البوت يتوقف عند مواجهة خطأ غير متوقع

## الإصلاحات المطلوبة:

### الخطوة 1: إضافة المتغيرات العامة لتتبع الحالة
أضف الشيفرة التالية بعد تعريف المتغير logger مباشرة:

```python
# مجموعة لتخزين معرفات الاستجابات التي تمت معالجتها
processed_callbacks = set()
# تخزين معرف آخر بريد إلكتروني تمت معالجته
last_processed_email_id = None
```

### الخطوة 2: تحديث دالة button_callback لمنع المعالجة المكررة
استبدل الشيفرة الحالية بدالة button_callback الجديدة:

```python
async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """معالجة نقرات الأزرار."""
    global TUTORIAL_VIDEO_FILE_ID, processed_callbacks, last_processed_email_id
    query = update.callback_query
    user_id = str(update.effective_user.id)
    
    # تجنب معالجة نفس الاستجابة عدة مرات
    callback_id = f"{query.message.message_id}_{query.data}"
    if callback_id in processed_callbacks:
        await query.answer("جاري المعالجة...")
        return
        
    # إضافة إلى الاستجابات المعالجة
    processed_callbacks.add(callback_id)
    
    # تنظيف مجموعة الاستجابات إذا أصبحت كبيرة جدًا
    if len(processed_callbacks) > 1000:
        # حذف أقدم 500 استجابة
        processed_callbacks = set(list(processed_callbacks)[-500:])
    
    await query.answer()
    
    if query.data == "get_chatgpt_code":
        # عرض رسالة انتظار
        try:
            await query.edit_message_text("🔍 جاري البحث عن آخر كود... انتظر قليلاً")
        except telegram.error.BadRequest as e:
            logger.error(f"فشل في تعديل رسالة الانتظار: {e}")
            try:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="🔍 جاري البحث عن آخر كود... انتظر قليلاً"
                )
            except Exception as e2:
                logger.error(f"فشل في إرسال رسالة انتظار جديدة: {e2}")
                return
        
        # البحث عن الكود
        code_info = self.get_latest_verification_code(user_id)
        
        keyboard = [
            [InlineKeyboardButton("🔄 تحديث", callback_data="get_chatgpt_code")],
            [InlineKeyboardButton("🎬 شاهد شرح طريقة الدخول", callback_data="show_tutorial")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if code_info:
            if "error" in code_info and code_info["error"] == "rate_limit":
                keyboard_rate_limit = [
                    [InlineKeyboardButton("🎬 شاهد شرح طريقة الدخول", callback_data="show_tutorial")]
                ]
                reply_markup_rate_limit = InlineKeyboardMarkup(keyboard_rate_limit)
                
                try:
                    await query.edit_message_text(
                        "⚠️ لقد تجاوزت الحد الأقصى من الطلبات. يرجى المحاولة لاحقًا.\n\n"
                        f"📧 البريد: <code>{TARGET_EMAIL}</code>\n"
                        f"🔒 كلمة المرور: <code>{PASSWORD}</code>\n\n"
                        f"<b>📝 طريقة الدخول:</b>\n"
                        f'1. اضغط على "try another method" من الأسفل\n'
                        f'2. اختر البريد الإلكتروني (الخيار الثالث)\n'
                        f'3. أدخل الكود الذي ستحصل عليه\n\n'
                        f"تمت برمجتي بواسطه احمد الرماح",
                        reply_markup=reply_markup_rate_limit,
                        parse_mode='HTML'
                    )
                except telegram.error.BadRequest as e:
                    logger.error(f"فشل في تحديث رسالة حد الاستخدام: {e}")
                    try:
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text="⚠️ لقد تجاوزت الحد الأقصى من الطلبات. يرجى المحاولة لاحقًا.\n\n"
                            f"📧 البريد: <code>{TARGET_EMAIL}</code>\n"
                            f"🔒 كلمة المرور: <code>{PASSWORD}</code>\n\n"
                            f"<b>📝 طريقة الدخول:</b>\n"
                            f'1. اضغط على "try another method" من الأسفل\n'
                            f'2. اختر البريد الإلكتروني (الخيار الثالث)\n'
                            f'3. أدخل الكود الذي ستحصل عليه\n\n'
                            f"تمت برمجتي بواسطه احمد الرماح",
                            reply_markup=reply_markup_rate_limit,
                            parse_mode='HTML'
                        )
                    except Exception as e2:
                        logger.error(f"فشل في إرسال رسالة حد الاستخدام جديدة: {e2}")
                return
            
            # عرض الكود فقط بطريقة بسيطة مع بيانات تسجيل الدخول
            message = (
                f"🔑 <b>كود التحقق الخاص بك:</b>\n\n"
                f"<code>{code_info['code']}</code>\n\n"
                f"📧 <b>بيانات تسجيل الدخول:</b>\n"
                f"البريد: <code>{TARGET_EMAIL}</code>\n"
                f"الباسورد: <code>{PASSWORD}</code>\n\n"
                f"<b>📝 طريقة الدخول:</b>\n"
                f'1. اضغط على "try another method" من الأسفل\n'
                f'2. اختر البريد الإلكتروني (الخيار الثالث)\n'
                f'3. أدخل الكود المعروض أعلاه\n\n'
                f"تمت برمجتي بواسطه احمد الرماح"
            )
            
            try:
                await query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except telegram.error.BadRequest as e:
                logger.error(f"فشل في تعديل رسالة الكود: {e}")
                try:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                except Exception as e2:
                    logger.error(f"فشل في إرسال رسالة الكود جديدة: {e2}")
        else:
            # رسالة محسنة عند عدم وجود كود
            keyboard_no_code = [
                [InlineKeyboardButton("🔄 تحديث", callback_data="get_chatgpt_code")],
                [InlineKeyboardButton("🎬 شاهد شرح طريقة الدخول", callback_data="show_tutorial")]
            ]
            reply_markup_no_code = InlineKeyboardMarkup(keyboard_no_code)
            
            try:
                await query.edit_message_text(
                    f"❌ لم يتم العثور على كود تحقق\nحاول مره اخري\n\n"
                    f"📧 <b>بيانات تسجيل الدخول:</b>\n"
                    f"البريد: <code>{TARGET_EMAIL}</code>\n"
                    f"الباسورد: <code>{PASSWORD}</code>\n\n"
                    f"<b>📝 طريقة الدخول:</b>\n"
                    f'1. اضغط على "try another method" من الأسفل\n'
                    f'2. اختر البريد الإلكتروني (الخيار الثالث)\n'
                    f'3. أدخل الكود الذي ستحصل عليه\n\n'
                    f"تمت برمجتي بواسطه احمد الرماح",
                    reply_markup=reply_markup_no_code,
                    parse_mode='HTML'
                )
            except telegram.error.BadRequest as e:
                logger.error(f"فشل في تعديل رسالة عدم وجود كود: {e}")
                try:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"❌ لم يتم العثور على كود تحقق\nحاول مره اخري\n\n"
                        f"📧 <b>بيانات تسجيل الدخول:</b>\n"
                        f"البريد: <code>{TARGET_EMAIL}</code>\n"
                        f"الباسورد: <code>{PASSWORD}</code>\n\n"
                        f"<b>📝 طريقة الدخول:</b>\n"
                        f'1. اضغط على "try another method" من الأسفل\n'
                        f'2. اختر البريد الإلكتروني (الخيار الثالث)\n'
                        f'3. أدخل الكود الذي ستحصل عليه\n\n'
                        f"تمت برمجتي بواسطه احمد الرماح",
                        reply_markup=reply_markup_no_code,
                        parse_mode='HTML'
                    )
                except Exception as e2:
                    logger.error(f"فشل في إرسال رسالة عدم وجود كود جديدة: {e2}")
```

### الخطوة 3: تحديث دالة get_latest_verification_code لمنع معالجة البريد المكرر
ابحث عن دالة `get_latest_verification_code` وتأكد من أنها تتضمن المنطق التالي:

```python
def get_latest_verification_code(self, user_id: str) -> Optional[dict]:
    """استرجاع آخر كود تحقق من Gmail."""
    global last_processed_email_id
    
    # هنا يمكن أن يظل كود التحقق من بيانات الاعتماد والتعامل مع حدود الاستخدام
    
    # استرجاع الرسائل
    try:
        messages = self.gmail.list_messages(search_query, max_results=10)
        
        if not messages:
            return None
        
        # معالجة الرسائل من الأحدث إلى الأقدم
        for msg in messages:
            msg_id = msg.get("id")
            
            # التحقق مما إذا كان هذا البريد الإلكتروني قد تمت معالجته بالفعل
            if msg_id == last_processed_email_id:
                logger.info(f"تمت معالجة هذا البريد الإلكتروني بالفعل: {msg_id}")
                continue
                
            # باقي الشيفرة بدون تغيير
            # ...
            
            if verification_code:
                # حفظ معرف الرسالة كمعالجة لتجنب معالجتها مرة أخرى
                last_processed_email_id = msg_id
                
                return {
                    "code": verification_code,
                    # ... باقي البيانات
                }
```

### الخطوة 4: إضافة مُعالِج الأخطاء العام
أضف الشيفرة التالية في دالة `main()` قبل سطر `application.run_polling()`:

```python
# إضافة معالج الأخطاء
async def error_handler(update, context):
    """تسجيل الأخطاء التي تسببها التحديثات."""
    logger.error(f"حدث استثناء أثناء معالجة تحديث: {context.error}")
    
    # إخطار المستخدم بالخطأ إذا كان ذلك مناسبًا
    if update and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="حدث خطأ أثناء معالجة طلبك. الرجاء المحاولة مرة أخرى."
            )
        except Exception as e:
            logger.error(f"فشل في إرسال رسالة الخطأ: {e}")
            
application.add_error_handler(error_handler)
```

### الخطوة 5: إصلاح جميع عمليات تعديل الرسائل
تأكد من أن جميع استدعاءات `edit_message_text` في الكود تستخدم كتل try/except:

```python
try:
    await query.edit_message_text(
        # محتوى الرسالة
    )
except telegram.error.BadRequest as e:
    logger.error(f"فشل في تعديل الرسالة: {e}")
    try:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            # نفس محتوى الرسالة
        )
    except Exception as e2:
        logger.error(f"فشل في إرسال رسالة جديدة: {e2}")
```

## الطريقة السهلة: استخدام سكربت الإصلاح التلقائي

لتسهيل عملية الإصلاح، يمكنك استخدام السكربت التالي لتطبيق جميع الإصلاحات تلقائيًا:

1. تأكد من تفعيل بيئة Python: `python -m venv venv` ثم `venv\Scripts\activate` (Windows) أو `source venv/bin/activate` (Linux/Mac)
2. قم بتثبيت المكتبات المطلوبة: `pip install -r requirements.txt`
3. قم بتشغيل سكربت الإصلاح: `python fix_bot.py`
4. قم بتشغيل النسخة المصححة: `python fixed_gmail_bot.py`

هذا السكربت سيقوم بإنشاء نسخة احتياطية من الملف الأصلي ثم تطبيق جميع الإصلاحات على النسخة الجديدة.

## التحقق من نجاح الإصلاحات

بعد تطبيق الإصلاحات، يجب ملاحظة التالي:

1. البوت لن يعالج نفس الزر عدة مرات
2. البوت لن يتوقف عند محاولة تعديل رسائل محذوفة
3. البوت سيرسل رسالة جديدة إذا فشل في تعديل رسالة موجودة
4. البوت لن يعالج نفس رسالة البريد الإلكتروني أكثر من مرة
5. البوت سيستمر في العمل حتى عند حدوث أخطاء غير متوقعة 